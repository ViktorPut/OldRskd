<?php

require_once 'AbstractSQLClass.php';
require_once 'php/Entity/AddressClass.php';
require_once 'php/Entity/SimpleClass.php';

class AddressSQL extends  AbstractSQLClass {

    public function __construct($tableName = 'address'){
        parent::__construct($tableName);
//        $this->openConnection();
    }

    /**
     * @return  EntityInterface
    */
    protected function createInstance($row){
        $country = $this->simpleSQL->getSimpleParam('country',  $row["country_id"] );
        $city = $this->simpleSQL->getSimpleParam('city',  $row["city_id"] );
        $district = $this->simpleSQL->getSimpleParam('district',  $row["district_id"] );
        $street = $this->simpleSQL->getSimpleParam('street',  $row["street_id"] );
        $instance = new AddressClass($row["id"], $country, $city, $district, $street);
        if (isset($row["house_number"]))
            $instance->setNumber($row["house_number"]);
        return $instance;
        // TODO: Implement createInstance() method.
    }

    public function insertAddress($insertedInstance){
        if( $this->simpleSQL->insertSimpleParam('country', $insertedInstance->getCountry())    &&
            $this->simpleSQL->insertSimpleParam('city', $insertedInstance->getCity())          &&
            $this->simpleSQL->insertSimpleParam('district', $insertedInstance->getDistrict())  &&
            $this->simpleSQL->insertSimpleParam('street', $insertedInstance->getStreet())){
            $sql = "INSERT INTO $this->tableName (house_number, country_id, city_id, district_id, street_id) VALUES(:house_number, :country, :city, :district, :street)";

            $this->connection->beginTransaction();
            try{
                $stmt = $this->connection->prepare($sql);
                $stmt->execute([
                   'house_number'   => $insertedInstance->getNumber(),
                    'country'       => $insertedInstance->getCountry()->getID(),
                    'city'          => $insertedInstance->getCity()->getID(),
                    'district'      => $insertedInstance->getDistrict()->getID(),
                    'street'        => $insertedInstance->getStreet()->getID()
                ]);
                $insertedInstance->setID($this->connection->lastInsertID());
                $this->connection->commit();
            }catch (PDOException $exception){
                $this->connection->rollBack();
                $insertedInstance->setID(0);
                return false;
            }
            return true;
        }else{
            return false;
        }
    }

    public  function  updateAddress($instance){
        if ($instance === null){
            return false;
        }
        $this->simpleSQL->updateSimpleParam('city', $instance->getCity());
        $this->simpleSQL->updateSimpleParam('district', $instance->getDistrict());
        $this->simpleSQL->updateSimpleParam('street', $instance->getStreet());

        $sql = "UPDATE $this->tableName SET house_number = :number WHERE id = :id";
        $this->connection->beginTransaction();

        try{
            $stmt = $this->connection->prepare($sql);
            $stmt->execute([
                'number' => $instance->getNumber(),
                'id'    => $instance->getID()
            ]);
            $this->connection->commit();
            return true;
        }catch (PDOException $exception){
            $this->connection->rollBack();
            return false;
        }
    }

    public function __destruct(){
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}