<?php

    require_once 'AbstractSQLClass.php';
//    require_once 'D:/OpenServer/OSPanel/domains/localhost/Test/php/SQL/AbstractSQLClass.php';
//    require_once 'D:/OpenServer/OSPanel/domains/localhost/Test/php/Entity/UserCLass.php';
    require_once 'php/Entity/UserCLass.php';

    class UserSQL extends AbstractSQLClass {
        const admin = 1;
        const manager = 2;
        const simpleUser = 3;

        public function __construct($tableName = 'users'){
            parent::__construct($tableName);
        }

        public function getAll(){
            $sqlQuery = "SELECT * FROM $this->tableName ORDER BY 10 DESC ";
            $rows = $this->connection->query($sqlQuery);
            if ($rows->rowCount() == 0)
                return null;
            foreach ($rows as $row){
                $result[] = $this->createInstance($row);
            }
            return $result;
//            return parent::getAll(); // TODO: Change the autogenerated stub
        }

        protected function createInstance($row){
            $id = $row['id'];
            $role = $this->simpleSQL->getSimpleParam('roles', $row['roles_id']);
            $userName = $row['user_name'];
            $userInfo = $row['user_info'];
            $userEmail = $row['user_email'];
            $photo = $row['photo_place'];
            $rank = $row['rank'];
            $userPhone = $row['user_phone'];
            return new UserCLass($id, $rank, $userEmail, $photo, $role, $userInfo, $userName, $userPhone);
            // TODO: Implement createInstance() method.
        }

        public function getByLogin($login, $password){
            $sql = "SELECT * FROM $this->tableName WHERE user_login = '$login'";
            $rows = $this->connection->query($sql);
            if ($rows->rowCount() > 0){
                foreach ($rows as $row) {
                    if ($row['user_password'] !== md5($password)){
                        return null;
                    }else{
                        return $this->createInstance($row);
                    }
                }
            }
            return null;
        }

        public function registration($insertInstance){
            $sql = "INSERT INTO $this->tableName VALUES (null, :roles, :login, :password, :name, :info, :photo, :email, :phone);";
            $this->connection->beginTransaction();

            try{

                $stmt = $this->connection->prepare($sql);
                $stmt->execute([
                    'roles' => UserSQL::simpleUser,
                    'login' => $insertInstance->getLogin(),
                    'password' => md5($insertInstance->getPassword()),
                    'name' => $insertInstance->getName(),
                    'info' => $insertInstance->getInfo(),
                    'photo' => $insertInstance->getPhoto(),
                    'email' => $insertInstance->getEmail(),
                    'phone' => $insertInstance->getPhone()
                ]);

                $insertInstance->setID($this->connection->lastInsertID());
                $this->connection->commit();
                return true;
            }catch (PDOException $exception){
//                echo 'Error registration';
                return false;
            }
        }

        public function updateInfo($instance){
            $sql = "UPDATE $this->tableName SET user_name = :userName, user_info = :userInfo, photo_place = :photoPlace, user_email = :userEmail, user_phone = :userPhone, rank =:rank WHERE id = :id";
            $this->connection->beginTransaction();
            try{
                $stmt = $this->connection->prepare($sql);
                $stmt->execute([
                    'userName' => $instance->getName(),
                    'userInfo' => $instance->getInfo(),
                    'photoPlace' => $instance->getPhoto(),
                    'userEmail' => $instance->getEmail(),
                    'userPhone' => $instance->getPhone(),
                    'rank' => $instance->getRank(),
                    'id'   => $instance->getID()
                ]);
                $this->connection->commit();
            }catch (PDOException $exception){
//                echo $this->connection->errorInfo().$this->connection->errorCode();
                $this->connection->rollBack();
                return false;
            }
        }

        public function updatePass($instance){
            $sql = "UPDATE $this->tableName SET user_password = :pass WHERE id = :id";
            $this->connection->beginTransaction();

            try{
                $stmt = $this->connection->prepare($sql);
                $stmt->execute([
                    'pass' => md5($instance->getPassword()),
                    'id'   => $instance->getID()
                ]);
                $this->connection->commit();
            }catch (PDOException $exception){
                $this->connection->rollBack();
                return false;
            }

        }
    }



?>